(use '[clojure.data.json :as json])
(use 'clojure.data.json)
(json/write-str 'string)
(defrecord Whois [ip-low ip-high decimal-low decimal-high abbrev country])
(json/read-str "whois_partial.json")
(slurp "whois_partial.json")
(slurp "public/whois_partial.json")
(json/read-str "public/whois_partial.json")
(json/read-str (slurp "public/whois_partial.json"))
user.Whois
(eval user.Whois)
'user.Whois
(def data (read-json (reader "public/whois_partial.json")))
(def data (json/read-json (reader "public/whois_partial.json")))
(def data (json/read-json (slurp "public/whois_partial.json")))
user.data
'user.data
(str user.data)
(spit user.data)
(spit 'user.data)
'user.data
(str data)
data.ip_lower_limit
data
(defrecord Whois [ip-lo ip-hi dec-lo dec-hi abbrev country])
Whois
'Whois
(eval Whois)
(require '[clojure.data.json :as json])
(def all-records (json/read-str (slurp "public/whois.json")
:key-fn keyword))
(defn find-matching [select-fn result-fn records]
(map result-fn (filter select-fn records)))
(defn select-within [rec query]
(and (< (:ip_lower_limit rec) query)
(< query (:ip_upper_limit rec))))
(find-matching #(select-within % "1.0.0.0") :country)
(find-matching #(select-within % "1.0.0.0") :country all-records)
(defn select-within [rec query]
(and (< (:decimal_lower_limit rec) query)
(< query (:decimal_upper_limit rec)))
)
find-matching #(select-within % "16777217") :country all-records)
'user/select-within
(doc user/select-within)
source
(source user/select-within)
(def all-records (json/read-str (slurp "public/whois.json")
)
(require '[clojure.data.json :as json])
(def all-records (json/read-str (slurp "public/whois.json")))
(require '[clojure.data.json :as json])
(def all-records (json/read-str (slurp "public/whois.json")))
(filter #(and (<= (:decimal_lower_limit %) "16777217")
(<= "16777217" (:decimal_upper_limit %)) all-records))
(filter #(and (<= (:decimal_lower_limit %) "16777217")
(<= "16777217" (:decimal_upper_limit %))) all-records))
(def partial-records (json/read-str (slurp "public/whois_partial.json")))
(spit user/partial-records)
(str user/partial-records)
(str partial-records)
clear
(str (:country partial-records))
(find partial-records :country)
(first partial-records)
(:ip_lower_limit (first partial-records))
(keys (first partial-records))
(take 10 all-records)
(get (first partial-records) :country)
(get (first partial-records) country)
(get (first partial-records) :country)
(first partial-records)
(get (first partial-records) "country")
(get '(first partial-records) "country")
(get (first partial-records) #"country")
(get (first partial-records) country)
(get (first partial-records) ["country"])
(get '(first partial-records) "country")
(get (first partial-records) "country")
partial-records
(map #(str %) partial-records)
(map partial-records)
(filter (and (<= (:decimal_lower_limit %) "16777217") (<= "16777217" (:decimal_upper_limit %)) partial-records)
)
(filter #(and (<= (:decimal_lower_limit %) "16777217") (<= "16777217" (:decimal_upper_limit %)) partial-records))
(filter #(and (<= (:decimal_lower_limit %) "16777217") (<= "16777217" (:decimal_upper_limit %))) partial-records))
(filter (>= "16777217") [:ip_lowerLimit partial-records])
(get :ip_lower_limit partial-records)
(get partial-records "ip_lower_limit")
(map (get partial-records "ip_lower_limit"))
(defn find-matching [select-fn result-fn records]
(map result-fn (filter select-fn records)))
(defn select-within [rec query]
(and (<= (:decimal_lower_limit rec) query) (<= query (:decimal_upper_limit rec))))
(find-matching #(select-within % "16777217") :country)
(find-matching #(select-within % "16777217") :country partial-records)
(find-matching #(select-within % 16777217) :country partial-records)
(defn select-within [rec query]
(and (<= ("decimal_lower_limit" rec) query) (<= query ("decimal_upper_limit" rec))))
(find-matching #(select-within % 16777217) "country" partial-records)
(map s
)
(require '[clojure.data.json :as json])
(def Whois
(json/read-str (slurp "public/whois.json")
:key-fn key))
(def Whois
(json/read-str (slurp "public/whois.json")
:key-fn keyword))
(first Whois)
(filter (= "Australia") (first Whois))
(filter (= "Australia" (first Whois))
)
(filter  #(= "Australia") (first Whois))
(filter  #(= "Australia" rec) (first Whois))
(map (first Whois))
(map = "Australia" (first Whois))
(map = "ip_upper_limit" (first Whois))
(map = ":ip_lower_limit "1.0.0.0"" (first Whois))
(filter  #(= "Australia" %) (first Whois))
(filter  #(= :ip_lower_limit  %) (first Whois))
(filter  #(= ":ip_lower_limit"  %) (first Whois))
(filter  #(= 1.0.0.0  %) (first Whois))
(filter  #(= "1.0.0.0"  %) (first Whois))
(filter  #(= ":ip_lower_limit "1.0.0.0""  %) (first Whois))
(filter  #(= % :ip_lower_limit) (first Whois))
(filter  #(= % "Australia") (first Whois))
find-matching
#find-matching
()
'find-matching
user/Whois
(defn find-matching [select-fn result-fn records]
(map result-fn (filter select-fn records)))
(defn match-ip [rec decimal-ip]
(and (<= (:decimal_lower_limit rec) decimal-ip) (<= (:decimal_upper_limit 
rec))))
(find-matching #(select-within % "16777217") :country Whois)
(find-matching #(match-ip % "16777217") :country Whois)
(match-ip (first Whois) "16777217")
(match-ip (first Whois) '16777217)
(match-ip (first Whois) 16777217)
(first Whois)
(:ip_lower_limit (first Whois))
(:decimal_lower_limit (first Whois))
(= "16777216" (:decimal_lower_limit (first Whois)))
(< "16777217" (:decimal_lower_limit (first Whois)))
(class "16777217")
(class 12)
(class 16777217)
(cast "16777217" java.lang.Long)
(read-str "16777217")
(long "16777217")
(Long "16777217")
~"16777217"
(~"16777217")
(defn to-long [str]
)
read-str
(defn to-long [str]
(let [n (read-string str)]
(if (number? n) n nil)))
(to-long "16777217")
(= "16777216" (:decimal_lower_limit (first Whois)))
(= 16777216 (to-long (:decimal_lower_limit (first Whois))))
(defn select-within [rec query]
(and
(<= (to-long (:decimal_lower_limit rec)) query)
(<= query (to-long (:decimal_upper_limit rec)))))
(find-matching #(select-within % 16777217) :country Whois)
~(find-matching #(select-within % 16777217) :country Whois)
(find-matching #(select-within % 16777217) :country Whois)
(find-matching #(select-within % 3261761842) :country Whois)
(Long. "16777217")
(long "16777217")
(bigdec "16777217")
(num "16777217")
(bigint "16777217")
(< "1.0.0.0" "1.0.0.1")
(split "1.0.0.0" #"\.")
(clojure.string/split "1.0.0.0" #"\.")
(bit-shift-left 127 24)
(bit-shift-left 127 23)
(bit-shift-left "127" 23)
(bit-shift-left (long.parseLong "127") 23)
(bit-shift-left (Long.parseLong "127") 23)
(Long/parseLong "127")
(bit-shift-left 127 24)
(< "127" 127)
(< '"127" 127)
(< #"127" 127)
'"127"
~"127"
(~ "127")
(quote "127")
(string/split "1.0.0.0")
(clojure.string/split "1.0.0.0")
(clojure.string/split "1.0.0.0" #"\.")
(walk bigint (clojure.string/split "1.0.0.0" #"\."))
(clojure.walk/walk bigint (clojure.string/split "1.0.0.0" #"\."))
(use 'clojure.walk)
(walk (clojure.string/split #"\.") bigint "1.0.0.0")
(walk (clojure.string/split % #"\.") bigint "1.0.0.0")
(walk #(bigint %) #(clojure.string/split % #"\.") "1.0.0.0")
(walk #(+ %) #(clojure.string/split % #"\.") "1.0.0.0")
(walk #(clojure.string/split % #"\.") #(bigint %) "1.0.0.0")
(walk #(+ (bigint %)) #(clojure.string/split % #"\.") "1.0.0.0")
(walk #(apply + (bigint %)) #(clojure.string/split % #"\.") "1.0.0.0")
(walk #(apply + %) #(clojure.string/split % #"\.") "1.0.0.0")
(walk #(clojure.string/split % #"\.") #(apply + %) "1.0.0.0")
(walk #(clojure.string/split % #"\.") #(apply + (bigint %)) "1.0.0.0")
(use 'clojure.string.split)
(use 'clojure.string/split)
(use clojure.string/split)
(use 'clojure.string)
(use 'clojure.string :only split)
(clojure.string/split "1.0.0.0" #"\.")
(apply bigint ["1" "0" "0" "0"])
(map bigint ["1" "0" "0" "0"])
(apply + (map bigint ["1" "0" "0" "0"]))
(apply + (map bigint ["127" "0" "0" "0"]))
(apply + (map Long/parseLong ["127" "0" "0" "0"]))
(apply + (map Long.parseLong ["127" "0" "0" "0"]))
(apply + (map bigint ["127" "0" "0" "0"]))
(-> [127 0 0 1]
(first bit-shift-left 24))
(bit-shift-left (first [127 0 0 1]) 24)
(-> [127 0 0 1]
first)
(-> [127 0 0 1]
first
bit-shift-left 24)
(-> [127 0 0 1]
first
(bit-shift-left % 24)
)
(-> [127 0 0 1]
(bit-shift-left first 24))
(-> [127 0 0 1]
first)
(defn decimal-ip [a b c d]
(bit-shift-left a 24))
(decimal-ip [127 0 0 1])
(defn decimal-ip [coll]
(bit-shift-left (first coll) 24))
(decimal-ip [127 0 0 1])
(defn decimal-ip [coll]
(bit-shift-left (first coll) 24)
(bit-shift-left (second coll) 16))
(decimal-ip [coll]
(bit-shift-left (first coll) 24)
(bit-shift-left (second coll) 16))
(defn decimal-ip [coll]
(bit-shift-left (first coll) 24)
(bit-shift-left (second coll) 16)
(bit-shift-left (nth coll 2) 8))
(decimal-ip [127 0 0 1])
(defn decimal-ip [coll]
(bit-shift-left (first coll) 24)
(bit-shift-left (second coll) 16)
(bit-shift-left (nth coll 2) 8)
[coll])
(decimal-ip [127 0 0 1])
(defn decimal-ip [coll]
(apply +
(bit-shift-left (first coll) 24)
(bit-shift-left (second coll) 16)
(bit-shift-left (nth coll 2) 8)
last)
)
(decimal-ip [127 0 0 1])
(defn decimal-ip [coll]
(apply +
(bit-shift-left (first coll) 24)
(bit-shift-left (second coll) 16)
(bit-shift-left (nth coll 2) 8)
(last coll)))
(decimal-ip [127 0 0 1])
(defn decimal-ip [coll]
(+
(bit-shift-left (first coll) 24)
(bit-shift-left (second coll) 16)
(bit-shift-left (nth coll 2) 8)
(last coll)))
(decimal-ip [127 0 0 1])
(defn ip-to-bigints [ip-string]
(map bigint
(clojure.string/split ip-string #"\.")))
(ip-to-bigints ["127" "0" "0" "1"])
(clojure.string/split ["127" "0" "0" "1"] #"\.")
(map bigint ["127" "0" "0" "1"])
(defn ip-to-bigints [coll]
(map bigint coll))
(ip-to-bigints ["127" "0" "0" "1"]_
)
(ip-to-bigints ["127" "0" "0" "1"])
(defn ip-to-decimal [coll]
(+
(bit-shift-left (first ip-bigints) 24)
    (bit-shift-left (second ip-bigints) 16)
    (bit-shift-left (nth ip-bigints 2) 8)
    (last ip-bigints)))
(defn ip-to-decimal [ip-bigints]
(+
(bit-shift-left (first ip-bigints) 24)
    (bit-shift-left (second ip-bigints) 16)
    (bit-shift-left (nth ip-bigints 2) 8)
    (last ip-bigints)))
(ip-to-decimal [127 0 0 1])
(ip-to-decimal (ip-to-bigints ["127" "0" "0" "1"]))
(ip-to-decimal ["127" "0" "0" "1"])
(def ip-string ["127" "0" "0" "1"])
ip-string
ip-to-bigints
'ip-to-bigints
(ip-to-bigints ip-string)
(ip-to-decimal (ip-to-bigints ip-string))
(defn ip-to-long [coll]
(map Long. coll))
(Long/parseLong "127")
(defn ip-to-long [coll]
(map Long/parseLong coll))
(Long/parseLong "127")
(defn ip-to-long [coll]
(map Long.parseLong coll))
(defn ip-to-long [coll]
(map #Long.parseLong coll))
(defn ip-to-long [coll]
(apply #Long.parseLong coll))
(map Long/parseLong ip-string)
(Long/parseLong ip-string)
(apply #(Long/parseLong %) ip-string)
(map #(Long/parseLong %) ip-string)
(map bigint ["127" "0" "0" "1"])
(clojure.string/split ip-string #"\.")))
ip-string
(def ip-string "127.0.0.1")
ip-string
(clojure.string/split ip-string #"\.")))
(clojure.string/split ip-string #"\.")
(def ip-country-table
)
(require '[clojure.data.json :as json])
(def ip-country-table
(json/read-str (slurp "public/whois.json")
:key-fn keyword))
(defn get-country [select-fn result-fn records]
(map result-fn (filter select-fn records)))
(defn select-within [rec query]
(and (<= (Long/parseLong (:decimal_lower_limit rec)) query)
(<= query (Long/parseLong (:decimal_upper_limit rec)))))
(get-country #(select-within % 3261761842) :country ip-country-table)
(str (get-country #(select-within % 3261761842) :country ip-country-table))
(pr-str (get-country #(select-within % 3261761842) :country ip-country-table))
(first (get-country #(select-within % 3261761842) :country ip-country-table))
(def ip-country-table
  (json/read-str
    (slurp "public/whois.json")
    :key-fn keyword))
(require [clojure.data.json :as json])
(require '[clojure.data.json :as json])
(def ip-country-table
  (json/read-str
    (slurp "public/whois.json")
    :key-fn keyword))
(def country-vat-table
  (json/read-str
    (slurp "public/eu_vat_rates.json")
    :key-fn keyword))
(defn get-vat-rate [country]
  (get country-vat-table country)
)
(get-vat-rate "Ireland")
(get-vat-rate ["Ireland"])
(defn get-vat-rate [country]
  (get country-vat-table :country))
(get-vat-rate ["Ireland"])
(json/write-str country-vat-table)
(defn get-vat-rate [country vat-rate]
  (map country (filter vat-rate country-vat-table))
)
(get-vat-rate "Ireland" country-vat-table)
(get-in country-vat-table [:country :vat_rate])
(get-in country-vat-table [:country])
(filter #(contains % country-vat-table) :country)
(filter #(contains? % country-vat-table) :country)
(defn get-country [ip-in-range? country ip-country-table]
    (map country (filter ip-in-range? ip-country-table)))
(defn ip-in-range? [ip-range decimal-ip]
  (and (<= (Long/parseLong (:decimal_lower_limit ip-range)) decimal-ip)
         (<= decimal-ip (Long/parseLong (:decimal_upper_limit ip-range)))))
(get-country #(ip-in-range? % 22222222) :country ip-country-table)
(keys country-vat-table)
(keys ip-country-table)
(str ip-country-table)
(str country-vat-table_
)
(str country-vat-table)
(keys (first country-vat-table))
(def country-vat-table
  (json/read-str
    (slurp "public/eu_vat_rates.json")
    :key-fn keyword))
(require '[clojure.data.json :as json])
(def country-vat-table
  (json/read-str
    (slurp "public/eu_vat_rates.json")
    :key-fn keyword))
(filter #(= :country "Ireland") country-vat-table)
(require '[clojure.data.json :as json])
(json/read "public.eu_vat_rates.json)
")
(json/read "public.eu_vat_rates.json")
(json/read-str "public.eu_vat_rates.json")
(json/read-str "public/eu_vat_rates.json")
(json/read (slurp "public/eu_vat_rates.json"))
(json/read-str (slurp "public/eu_vat_rates.json"))
(json/read-str (slurp "public/eu_vat_rates.json") :value-fn)
(json/read-str (slurp "public/eu_vat_rates.json") :value-fn val)
(json/read-str (slurp "public/eu_vat_rates.json") :key-fn keyword)
(def country-vat-table
  (json/read-str
    (slurp "public/eu_vat_rates.json")
    :key-fn keyword))
(filter #(= (:country %) "Ireland") country-vat-table)
(get :vat_rate (filter #(= (:country %) "Ireland") country-vat-table))
(get (filter #(= (:country %) "Ireland") country-vat-table) :vat_rate)
(get (first (filter #(= (:country %) "Ireland") country-vat-table)) :vat_rate)
(get (peek (filter #(= (:country %) "Ireland") country-vat-table)) :vat_rate)
(get (first (filter #(= (:country %) "Ireland") country-vat-table)) :vat_rate)
(list? (get (first (filter #(= (:country %) "Ireland") country-vat-table)) :vat_rate))
(coll? (get (first (filter #(= (:country %) "Ireland") country-vat-table)) :vat_rate))
(vector? (get (first (filter #(= (:country %) "Ireland") country-vat-table)) :vat_rate))
(set? (get (first (filter #(= (:country %) "Ireland") country-vat-table)) :vat_rate))
(map? (get (first (filter #(= (:country %) "Ireland") country-vat-table)) :vat_rate))
(seq? (get (first (filter #(= (:country %) "Ireland") country-vat-table)) :vat_rate))
(unquote (get (first (filter #(= (:country %) "Ireland") country-vat-table)) :vat_rate))
(get (first (filter #(= (:country %) "Ireland") country-vat-table)) :vat_rate)
(filter #(= (:country %) "Ireland")
)
(filter #(= (:country %) "Ireland") country-vat-table)
(type (filter #(= (:country %) "Ireland") country-vat-table))
(type (first (filter #(= (:country %) "Ireland") country-vat-table)))
(map :vat_rate (filter #(= (:country %) "Ireland") country-vat-table))
(defn get-vat-rate [country]
  (map :vat_rate (filter #(= (:country %) country) country-vat-table)))
(get-vat-rate "Ireland")
(get-vat-rate "United Kingdom")
(Long/parseLong (get-vat-rate "United Kingdom"))
(Long/parseLong (first (get-vat-rate "United Kingdom")))
(def ip-country-table
  (json/read-str
    (slurp "public/whois.json")
    :key-fn keyword))
(Long/parseLong (first (:decimal_lower_limit ip-country-table))))
(Long/parseLong (:decimal_lower_limit (first ip-country-table)))
(defn what-is-my-vat-rate [request]
  "Takes an http request. Returns the :vat_rate value (as a json string) from
  the country-vat-table map specified by the country value of the corresponding
  map."
;  (json/write-str (Long/parseLong (first (get-vat-rate (first (get-country ip-in-range?
;              (ip-to-decimal
;                (ip-to-long
;                  (ip-to-vector
;
                   (let [ip (->> "194.106.137.50"
                              ip-to-vector
                              ip-to-long
                              ip-to-decimal)]
                    (println ip)
                      (->> ip
                         (get-country ip-in-range?)
                         first
                         get-vat-rate
                         first
                         Long/parseLong
                         json/write-str)
                      ))
(require '[clojure.java.jdbc :as sql])
(sql/with-connection (System/getenv "DATABASE_URL")
(sql/create-table :testing [:data :text]))
(sql/with-connection (System/getenv "DATABASE_URL")
(sql/insert-record :testing {:data "Hello World"}))
(sql/with-connection (System/getenv "DATABASE_URL")
(sql/with-query-results results
["select * from testing"]
(into [] results)))
(sql/with-connection (System/getenv "DATABASE_URL")
(sql/drop-table :testing))
(require '[clojure.java.jdbc :as sql])
(sql/with-connection (System/getenv "DATABASE_URL")
         (sql/create-table :testing [:data :text]))
(sql/with-connection (System/getenv "DATABASE_URL")
         (sql/insert-record :testing {:data "Hello World"}))
(sql/with-connection (System/getenv "DATABASE_URL")
         (sql/with-query-results results
           ["select * from testing"]
           (into [] results)))
(sql/with-connection (System/getenv "DATABASE_URL")
         (sql/drop-table :testing))
