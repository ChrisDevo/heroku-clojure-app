(slurp "whois.json")
(slurp "~/whispering-inlet-2503/whispering-inlet-2503/public/whois.json")
(use [clojure.data.json :as json)
(use [clojure.data.json :as json])
(use '[clojure.data.json :as json])
(require [clojure.data.json : as json])
(require [clojure.data.json :as json])
(web.clj/-main)
(require 'web)
(require 'src.web)
(require 'heroku-clojure-app.web)
(heroku-clojure-app.web/-main)
(require 'whispering-inlet-2503.project)
(require 'project.clj)
(require 'project)
(use 'clojure.data.json :as json)
(use clojure.data.json :as json)
(use '[clojure.data.json :as json])
(use 'clojure.data.json)
(json/write-str 'string)
(defrecord Whois [ip-low ip-high decimal-low decimal-high abbrev country])
(json/read-str "whois_partial.json")
(slurp "whois_partial.json")
(slurp "public/whois_partial.json")
(json/read-str "public/whois_partial.json")
(json/read-str (slurp "public/whois_partial.json"))
user.Whois
(eval user.Whois)
'user.Whois
(def data (read-json (reader "public/whois_partial.json")))
(def data (json/read-json (reader "public/whois_partial.json")))
(def data (json/read-json (slurp "public/whois_partial.json")))
user.data
'user.data
(str user.data)
(spit user.data)
(spit 'user.data)
'user.data
(str data)
data.ip_lower_limit
data
(defrecord Whois [ip-lo ip-hi dec-lo dec-hi abbrev country])
Whois
'Whois
(eval Whois)
(require '[clojure.data.json :as json])
(def all-records (json/read-str (slurp "public/whois.json")
:key-fn keyword))
(defn find-matching [select-fn result-fn records]
(map result-fn (filter select-fn records)))
(defn select-within [rec query]
(and (< (:ip_lower_limit rec) query)
(< query (:ip_upper_limit rec))))
(find-matching #(select-within % "1.0.0.0") :country)
(find-matching #(select-within % "1.0.0.0") :country all-records)
(defn select-within [rec query]
(and (< (:decimal_lower_limit rec) query)
(< query (:decimal_upper_limit rec)))
)
find-matching #(select-within % "16777217") :country all-records)
'user/select-within
(doc user/select-within)
source
(source user/select-within)
(def all-records (json/read-str (slurp "public/whois.json")
)
(require '[clojure.data.json :as json])
(def all-records (json/read-str (slurp "public/whois.json")))
(require '[clojure.data.json :as json])
(def all-records (json/read-str (slurp "public/whois.json")))
(filter #(and (<= (:decimal_lower_limit %) "16777217")
(<= "16777217" (:decimal_upper_limit %)) all-records))
(filter #(and (<= (:decimal_lower_limit %) "16777217")
(<= "16777217" (:decimal_upper_limit %))) all-records))
(def partial-records (json/read-str (slurp "public/whois_partial.json")))
(spit user/partial-records)
(str user/partial-records)
(str partial-records)
clear
(str (:country partial-records))
(find partial-records :country)
(first partial-records)
(:ip_lower_limit (first partial-records))
(keys (first partial-records))
(take 10 all-records)
(get (first partial-records) :country)
(get (first partial-records) country)
(get (first partial-records) :country)
(first partial-records)
(get (first partial-records) "country")
(get '(first partial-records) "country")
(get (first partial-records) #"country")
(get (first partial-records) country)
(get (first partial-records) ["country"])
(get '(first partial-records) "country")
(get (first partial-records) "country")
partial-records
(map #(str %) partial-records)
(map partial-records)
(filter (and (<= (:decimal_lower_limit %) "16777217") (<= "16777217" (:decimal_upper_limit %)) partial-records)
)
(filter #(and (<= (:decimal_lower_limit %) "16777217") (<= "16777217" (:decimal_upper_limit %)) partial-records))
(filter #(and (<= (:decimal_lower_limit %) "16777217") (<= "16777217" (:decimal_upper_limit %))) partial-records))
(filter (>= "16777217") [:ip_lowerLimit partial-records])
(get :ip_lower_limit partial-records)
(get partial-records "ip_lower_limit")
(map (get partial-records "ip_lower_limit"))
(defn find-matching [select-fn result-fn records]
(map result-fn (filter select-fn records)))
(defn select-within [rec query]
(and (<= (:decimal_lower_limit rec) query) (<= query (:decimal_upper_limit rec))))
(find-matching #(select-within % "16777217") :country)
(find-matching #(select-within % "16777217") :country partial-records)
(find-matching #(select-within % 16777217) :country partial-records)
(defn select-within [rec query]
(and (<= ("decimal_lower_limit" rec) query) (<= query ("decimal_upper_limit" rec))))
(find-matching #(select-within % 16777217) "country" partial-records)
